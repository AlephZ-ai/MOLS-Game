@page "/Counter"
@rendermode InteractiveServer
@using System
@using MOLS_Game.TreeClasses
@using System.Diagnostics;

@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<h3>The MOLS Puzzle Game</h3>

<div style="display: flex; align-items: start; gap: 20px;">
    <div style="display: flex; flex-direction: column; align-items:center; gap:20px">
        <div class="puzzle-container" style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 5px;">
            @for (int i = 0; i < 16; i++)
            {
                if (TileEditor.CheckIfMOLS(tiles))
                {
                    <div style="width: 100px; height: 100px; display: flex; align-items: center; justify-content: center; border: 1px solid black; background-color: lightgreen">
                        <img src="@GetCardImagePath(tiles[i])" alt="@GetCardDescription(tiles[i])" style="width: 100%; height: 100%;" />
                    </div>
                }
                else
                {
                    if (tiles[i] == "11")
                    {
                        <div style="width: 100px; height: 100px; display: flex; align-items: center; justify-content: center; border: 1px solid black; background-color: gray">
                            <img src="@GetCardImagePath(tiles[i])" alt="@GetCardDescription(tiles[i])" style="width: 100%; height: 100%;" />
                        </div>
                    }
                    else
                    {
                        <div style="width: 100px; height: 100px; display: flex; align-items: center; justify-content: center; border: 1px solid black;">
                            <img src="@GetCardImagePath(tiles[i])" alt="@GetCardDescription(tiles[i])" style="width: 100%; height: 100%;" />
                        </div>
                    }
                }
            }
        </div>
        <div style="width: 416px; height: 100px; display: flex; align-items: flex-start; justify-content: left; border: 1px solid black;word-wrap: break-word; overflow-wrap: break-word;">
            <div style="word-wrap: break-word; overflow-wrap: break-word; width: 100%;">
                @longPath
            </div>
        </div>
    </div>

    <div style="display: flex; flex-direction: column; align-items:center; gap:20px;">
        <button class="btn btn-outline-dark" style="width:210px; height:40px" @onkeydown="KeyDown">Press to Use Arrow Keys</button>
        <button class="btn btn-outline-dark" style="width:210px; height:40px" @onclick="InitializeGame">Press to Randomize Tiles</button>

        <button class="btn btn-outline-dark" style="width:210px; height:40px" @onclick="() => RunJobAsync(PathFindingType.BreadthFirst)">Find Solution (BFS)</button>
        <button class="btn btn-outline-dark" style="width:210px; height:40px" @onclick="() => RunJobAsync(PathFindingType.Heuristic)">Find Solution (H)</button>
        <button class="btn btn-outline-dark" style="width:210px; height:40px" @onclick="() => RunJobAsync(PathFindingType.OptimizedH)">Find Solution (H+BFS)</button>
        <button class="btn btn-outline-dark" style="width:210px; height:40px" @onclick="() => RunJobAsync(PathFindingType.XAhead)">Find Solution (XAhead)</button>
        <button class="btn btn-outline-dark" style="width:210px; height:40px" @onclick="() => RunJobAsync(PathFindingType.DepthModifier)">Find Solution (DMod)</button>
        <button class="btn btn-outline-dark" style="width:210px; height:40px" @onclick="() => RunJobAsync(PathFindingType.Swap)">Press to Find Swap</button>
        <button class="btn btn-outline-dark" style="width:210px; height:40px" @onclick="GenerateAndSaveMOLS">Generate All MOLS</button>
        <button class="btn btn-outline-dark" style="width:210px; height:40px" @onclick="SampleAndSaveSolutions">Generate Soln Sample</button>
    </div>

    <div style="width: 416px; height: 500px; display: flex; align-items: flex-start; justify-content: left; border: 1px solid black;">
        <div style="word-wrap: break-word; overflow-wrap: break-word; width: 100%;">
            @path
            <p>Length: @path.Length</p>
        </div>
    </div>
</div>

<script>
    function saveAsFile(filename, bytesBase64) {
        var link = document.createElement('a');
        link.href = "data:text/plain;base64," + bytesBase64;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>

@code {
    private string[] tiles = { "11", "22", "33", "44", "24", "13", "42", "31", "32", "41", "14", "23", "43", "34", "21", "12" };
    public string tableInfo = "01020304050607080910111213141511";
    private int emptyIndex = 0;
    private string path = "";
    private string longPath = "";

    async Task RunJobAsync(PathFindingType type)
    {
        Stopwatch stopwatch = Stopwatch.StartNew();

        await Task.Run(() => FindPath(type));
        StateHasChanged();

        stopwatch.Stop();
        Console.WriteLine($"Milliseconds to run {type}: " + stopwatch.ElapsedMilliseconds);
    }

    private async Task GenerateAndSaveMOLS()
    {
        MOLSGenerator generator = new MOLSGenerator();
        string jsonMOLS = generator.GenerateAndExportMOLS(tiles);
        await JSRuntime.InvokeVoidAsync("saveAsFile", "MOLS.json", jsonMOLS);
    }

    private async Task SampleAndSaveSolutions()
    {
        MOLSGenerator generator = new MOLSGenerator();
        string jsonMOLS = generator.SolutionSample(tiles);
        await JSRuntime.InvokeVoidAsync("saveAsFile", "Sample.json", jsonMOLS);
    }

    private void FindPath(PathFindingType type)
    {
        switch (type)
        {
            case PathFindingType.BreadthFirst:
                path = TileEditor.GetPermutationsBreadthFirstSearch(tiles);
                break;
            case PathFindingType.Swap:
                path = TileEditor.GetPermutations2(tiles, TileEditor.SwapTiles1(tiles, 0, 7));
                break;
            case PathFindingType.Heuristic:
                path = TileEditor.GetPermutationsHeuristic(tiles);
                break;
            case PathFindingType.OptimizedH:
                path = TileEditor.GetPermutationsNewest(tiles, 6);
                break;
            case PathFindingType.XAhead:
                path = TileEditor.GetPermutationsIvan(tiles);
                break;
            case PathFindingType.DepthModifier:
                path = TileEditor.GetPermutationsDaniel(tiles);
                break;
        }
        longPath = ShortToLongMoves(path);
        GC.Collect();
    }

    public static string ShortToLongMoves(string shortMoves)
    {
        Dictionary<string, string> ShortToLongMovesMap = new Dictionary<string, string>
        {
            { "L", "h1, " },
            { "LL", "h2, " },
            { "LLL", "h3, " },
            { "U", "v1, " },
            { "UU", "v2, " },
            { "UUU", "v3, " },
            { "R", "h3, " },
            { "RR", "h2, " },
            { "RRR", "h1, " },
            { "D", "v3, " },
            { "DD", "v2, " },
            { "DDD", "v1, " }
        };

        string longMoves = "";
        List<string> shortMovesList = new List<string>();

        int p1 = 0;
        for (int i = 1; i <= shortMoves.Length; i++)
        {
            if (i == shortMoves.Length || shortMoves[i] != shortMoves[i - 1])
            {
                shortMovesList.Add(shortMoves.Substring(p1, i - p1));
                p1 = i;
            }
        }

        foreach (string identicalMove in shortMovesList)
        {
            longMoves += ShortToLongMovesMap.GetValueOrDefault(identicalMove, "");
        }

        return longMoves;
    }

    protected override void OnInitialized()
    {
        InitializeGame();
    }

    private void InitializeGame()
    {
        var rng = new Random();
        rng.Shuffle(tiles);
        emptyIndex = Array.IndexOf(tiles, "11");
    }

    private void MoveUp()
    {
        if (emptyIndex > 3)
        {
            SwapTiles(emptyIndex, emptyIndex - 4);
        }
    }

    private void MoveDown()
    {
        if (emptyIndex < 12)
        {
            SwapTiles(emptyIndex, emptyIndex + 4);
        }
    }

    private void MoveLeft()
    {
        if (emptyIndex % 4 != 0)
        {
            SwapTiles(emptyIndex, emptyIndex - 1);
        }
    }

    private void MoveRight()
    {
        if (emptyIndex % 4 != 3)
        {
            SwapTiles(emptyIndex, emptyIndex + 1);
        }
    }

    private void SwapTiles(int index1, int index2)
    {
        var temp = tiles[index1];
        tiles[index1] = tiles[index2];
        tiles[index2] = temp;
        emptyIndex = index2;

        tableInfo = "";
        foreach (string t in tiles)
        {
            tableInfo += t;
        }
        StateHasChanged();
    }

    private void KeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs args)
    {
        if (args.Key == "ArrowDown")
        {
            MoveDown();
        }
        else if (args.Key == "ArrowUp")
        {
            MoveUp();
        }
        else if (args.Key == "ArrowLeft")
        {
            MoveLeft();
        }
        else if (args.Key == "ArrowRight")
        {
            MoveRight();
        }
    }

    private string GetCardImagePath(string tile)
    {
        string suit = GetSuit(tile[0]);
        string rank = GetRank(tile[1]);
        return $"images/cards/{suit}_{rank}.png";
    }

    private string GetCardDescription(string tile)
    {
        string suit = GetSuit(tile[0]);
        string rank = GetRank(tile[1]);
        return $"{rank} of {suit}";
    }

    private string GetSuit(char suitChar)
    {
        return suitChar switch
        {
            '1' => "hearts",
            '2' => "diamonds",
            '3' => "clubs",
            '4' => "spades",
            _ => throw new ArgumentException("Invalid suit character."),
        };
    }

    private string GetRank(char rankChar)
    {
        return rankChar switch
        {
            '1' => "ace",
            '2' => "jack",
            '3' => "queen",
            '4' => "king",
            _ => throw new ArgumentException("Invalid rank character."),
        };
    }

    public enum PathFindingType
    {
        BreadthFirst,
        Swap,
        Heuristic,
        OptimizedH,
        XAhead,
        DepthModifier,
        Sample
    }
}