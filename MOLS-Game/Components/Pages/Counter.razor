@page "/Counter"
@rendermode InteractiveServer
@using System
@using MOLS_Game.TreeClasses
@using System.Diagnostics;

@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager



<h3>The MOLS Puzzle Game</h3>

<div style="display: flex; align-items: start; gap: 20px;">

    <div style="display: flex; flex-direction: column; align-items:center; gap:20px">
        <div class="puzzle-container" style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 5px;">
            @for (int i = 0; i < 16; i++)
            {
                if (TileEditor.CheckIfMOLS(tiles))
                {
                    <div style="width: 100px; height: 100px; display: flex; align-items: center; justify-content: center; border: 1px solid black; background-color: lightgreen">
                        @tiles[i]
                    </div>
                }
                else
                {
                    if (tiles[i] == "11")
                    {
                        <div style="width: 100px; height: 100px; display: flex; align-items: center; justify-content: center; border: 1px solid black; background-color: gray">
                            @tiles[i]
                        </div>
                    }
                    else
                    {
                        <div style="width: 100px; height: 100px; display: flex; align-items: center; justify-content: center; border: 1px solid black;">
                            @tiles[i]
                        </div>
                    }

                }

            }
        </div>
        <div style="width: 416px; height: 100px; display: flex; align-items: flex-start; justify-content: left; border: 1px solid black;word-wrap: break-word; overflow-wrap: break-word;">
            
            <div style="word-wrap: break-word; overflow-wrap: break-word; width: 100%;">
                @if (path.Length < 40)
                {
                    @path
                }
            </div>
            
        </div>
    </div>
    
    <div style="display: flex; flex-direction: column; align-items:center; gap:20px;">


        
        <button class="btn btn-outline-dark" style="width:210px; height:40px" @onkeydown="KeyDown">Press to Use Arrow Keys</button>
        <!-- <a href="/Permutations/@tableInfo/@emptyIndex" class="btn btn-outline-primary">Get Closest Permutations</a>-->
        <button class="btn btn-outline-dark" style="width:210px; height:40px" @onclick="InitializeGame">Press to Randomize Tiles</button>
        


        <button class="btn btn-outline-dark" style="width:210px; height:40px" @onclick="() => RunJobAsync(PathFindingType.New)">Find Solution (NEW)</button>
        <button class="btn btn-outline-dark" style="width:210px; height:40px" @onclick="() => RunJobAsync(PathFindingType.Old)">Find Solution (OLD)</button>
        <button class="btn btn-outline-dark" style="width:210px; height:40px" @onclick="() => RunJobAsync(PathFindingType.Swap)">Press to Find Swap</button>

    </div>

    <div style="width: 416px; height: 500px; display: flex; align-items: flex-start; justify-content: left; border: 1px solid black;">
        <div style="word-wrap: break-word; overflow-wrap: break-word; width: 100%;">
            @path
        </div>
    </div>



    
    

</div>



@code {
    private string[] tiles = { "11", "22", "33", "44", "24", "13", "42", "31", "32", "41", "14", "23", "43", "34", "21", "12" };
    public string tableInfo = "01020304050607080910111213141511"; // turn into starting permutation every time.
    private int emptyIndex = 0; // Assuming the empty space starts at the top left
    private string path = "";

    async Task RunJobAsync(PathFindingType type)
    {
        Stopwatch stopwatch = Stopwatch.StartNew();

        await Task.Run(() => FindPath(type));
        StateHasChanged();

        stopwatch.Stop();
        Console.WriteLine($"Milliseconds to run {type}: " + stopwatch.ElapsedMilliseconds);
    }


    private void FindPath(PathFindingType type)
    {
        switch (type)
        {
            case PathFindingType.New:
                path = TileEditor.GetPermutations(tiles);
                break;
            case PathFindingType.Swap:
                path = TileEditor.GetPermutations2(tiles, TileEditor.SwapTiles1(tiles, 0, 6));
                break;
            case PathFindingType.Old:
                path = TileEditor.GetPermutationsOld(tiles);
                break;
        }
        GC.Collect();
    }


    

   

    protected override void OnInitialized()
    {
        //InitializeGame();
    }


    private void InitializeGame()
    {
        var rng = new Random();
        rng.Shuffle(tiles); //use this to shuffle for a shuffle button as well
        emptyIndex = Array.IndexOf(tiles,"11");
        
    }



    private void MoveUp()
    {
        // Implement logic to move the empty space up, if possible
        if (emptyIndex > 3) // Check if not in the top row
        {
            SwapTiles(emptyIndex, emptyIndex - 4);
        }

    }

    private void MoveDown()
    {
        // Implement logic to move the empty space down, if possible
        if (emptyIndex < 12) // Check if not in the bottom row
        {
            SwapTiles(emptyIndex, emptyIndex + 4);
        }
    }

    private void MoveLeft()
    {
       
        
        if (emptyIndex % 4 != 0) // check if not in the first column
        {
            SwapTiles(emptyIndex, emptyIndex - 1);
        }
    }

    private void MoveRight()
    {
        if (emptyIndex % 4 != 3) // check if not in the last column
        {
            SwapTiles(emptyIndex, emptyIndex + 1);
        }
    }

    private void SwapTiles(int index1, int index2)
    {
        var temp = tiles[index1];
        tiles[index1] = tiles[index2];
        tiles[index2] = temp;
        emptyIndex = index2; 


        tableInfo = "";
        foreach(string t in tiles)
        {
            tableInfo += t;
        }
        StateHasChanged(); // Re-render the component
    }

    private void KeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs args)
    {
        if(args.Key == "ArrowDown")
        {
            MoveDown();
        } else if(args.Key == "ArrowUp")
        {
            MoveUp();
        } else if(args.Key == "ArrowLeft")
        {
            MoveLeft();
        } else if(args.Key == "ArrowRight")
        {
            MoveRight();
        }
    }


    public enum PathFindingType
    {
        New,
        Swap,
        Old
    }

}
