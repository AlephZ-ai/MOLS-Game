@page "/Counter"
@rendermode InteractiveServer
@using System
@using MOLS_Game.TreeClasses
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager



<h3>The MOLS Puzzle Game</h3>

<div style="display: flex; align-items: start; gap: 20px;">
    <div class="puzzle-container" style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 5px;">
        @for (int i = 0; i < 16; i++)
        {
            if (TileEditor.CheckIfMOLS(tiles))
            {
                <div style="width: 100px; height: 100px; display: flex; align-items: center; justify-content: center; border: 1px solid black; background-color: green">
                    @tiles[i]
                </div>
            } else
            {
                <div style="width: 100px; height: 100px; display: flex; align-items: center; justify-content: center; border: 1px solid black;">
                    @tiles[i]
                </div>
            }
            
        }
    </div>
<div style="display: flex; flex-direction: column; align-items:center; gap:20px">
    
      <button class="btn btn-outline-primary" @onkeydown="KeyDown">Press to Use Arrow Keys</button>
        <a href="/Permutations/@tableInfo/@emptyIndex" class="btn btn-outline-primary">Get Closest Permutations</a>
        <button class="btn btn-outline-primary" @onclick="InitializeGame">Press to Randomize Tiles</button>
        <button class="btn btn-outline-primary" @onclick="FindPath">Press to Find Solution</button>

</div>
    <div style="width: 200px; height: 100px; display: flex; align-items: center; justify-content: left; border: 1px solid black;">
        @path
    </div>
    

</div>

@code {
    private string[] tiles = { "__", "22", "33", "44", "24", "13", "42", "31", "32", "41", "14", "23", "43", "34", "21", "12" };

    public string tableInfo = "010203040506070809101112131415__"; // turn into starting permutation every time.
    private int emptyIndex = 0; // Assuming the empty space starts at the bottom right


    private string path = "";

    private void FindPath()
    {
        path = TileEditor.GetPermutations(tiles, 10); //change 15 if doesn't work
        StateHasChanged();
    }



    protected override void OnInitialized()
    {
        InitializeGame();
    }


    private void InitializeGame()
    {
        var rng = new Random();
        rng.Shuffle(tiles); //use this to shuffle for a shuffle button as well
        emptyIndex = Array.IndexOf(tiles,"__");

        
    }




    private void MoveUp()
    {
        // Implement logic to move the empty space up, if possible
        if (emptyIndex > 3) // Check if not in the top row
        {
            SwapTiles(emptyIndex, emptyIndex - 4);
        }

    }

    private void MoveDown()
    {
        // Implement logic to move the empty space down, if possible
        if (emptyIndex < 12) // Check if not in the bottom row
        {
            SwapTiles(emptyIndex, emptyIndex + 4);
        }
    }

    private void MoveLeft()
    {
        //Console.WriteLine("test");


        //Console.WriteLine("tried to move left {emptyIndex} ");
        // Implement logic to move the empty space left, if possible
        if (emptyIndex % 4 != 0) // Check if not in the first column
        {
            SwapTiles(emptyIndex, emptyIndex - 1);
        }
    }

    private void MoveRight()
    {
        // Implement logic to move the empty space right, if possible
        if (emptyIndex % 4 != 3) // Check if not in the last column
        {
            SwapTiles(emptyIndex, emptyIndex + 1);
        }
    }

    private void SwapTiles(int index1, int index2)
    {
        var temp = tiles[index1];
        tiles[index1] = tiles[index2];
        tiles[index2] = temp;
        emptyIndex = index2; // Update the empty space index

        //foreach(string t in tiles)
        //{
        //  Console.WriteLine(t);
        //}

        tableInfo = "";
        foreach(string t in tiles)
        {
            tableInfo += t;
        }
        StateHasChanged(); // Re-render the component
    }

    private void KeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs args)
    {
        if(args.Key == "ArrowDown")
        {
            MoveDown();
        } else if(args.Key == "ArrowUp")
        {
            MoveUp();
        } else if(args.Key == "ArrowLeft")
        {
            MoveLeft();
        } else if(args.Key == "ArrowRight")
        {
            MoveRight();
        }
    }


   
}
